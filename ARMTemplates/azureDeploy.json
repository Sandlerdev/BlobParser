{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "projectName": {
      "type": "string",
      "defaultValue": "FTIS",
      "minLength": 1,
      "maxLength": 11,
      "metadata": {
        "description": "Define the project name or prefix for all objects."
      }
    },

    "skuName": {
      "type": "string",
      "defaultValue": "S1",
      "metadata": {
        "description": "The SKU to use for the IoT Hub."
      }
    },
    "skuUnits": {
      "type": "string",
      "defaultValue": "1",
      "metadata": {
        "description": "The number of IoT Hub units."
      }
    },
    "d2cPartitions": {
      "type": "string",
      "defaultValue": "4",
      "metadata": {
        "description": "Partitions used for the event stream."
      }
    },

        "sqlAdminLogin": {
            "type": "string",
            "defaultValue":"FTISAdmin",
            "metadata": {
                "description":"Login for SQL Server Instance"
            }
        },
        "sqlAdminPassword":{
            "type": "securestring",
            "metadata": {
                "description":"Password for SQL instance."
            }

        },
        "Table Name": {
            "type": "string",
            "defaultValue": "FTEG_Data_test",
            "metadata":{
                "description":"Name of the Table that data will be stored in, inside the SQL Server Database."
            }
        }

  },
  "variables": {
    "iotHubName": "[concat(parameters('projectName'), '-hub-', uniqueString(resourceGroup().id))]",
    "storageAccountName": "[concat(toLower(parameters('projectName')), uniqueString(resourceGroup().id))]",
    "storageEndpoint": "[concat(parameters('projectName'), 'StorageEndpont')]",
    "location":"[resourceGroup().location]",
    "storageContainerName":"iotdata",
    "serverfarms_host_name":"[concat(parameters('projectName'), '-host-', uniqueString(resourceGroup().id))]",
    "sql_server_name": "[concat(parameters('projectName'), '-sql-', uniqueString(resourceGroup().id))]",
    "sql_db_name":"[concat(parameters('projectName'), '-db-', uniqueString(resourceGroup().id))]",
    "funcApp_name":"[concat(parameters('projectName'), '-func2-', uniqueString(resourceGroup().id))]",
    "serverfarm_externalid":"[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Web/serverfarms/',variables('serverfarms_host_name'))]",
    "resourceTags":{
            "OwnerEmail": "Snsandler@rockwellautomation.com",
            "Environment": "Sandbox",
            "Lifespan": "weeks",
            "BusinessUnit": "GSM - 535 - INFORMATION SOFTWARE",
            "Capability": "Design and Develop Product Offering",
            "CostCenter": "13065",
            "DataClassification": "Confidential"
        },
    "DOCKER_REGISTRY_SERVER_URL":"https://dtodevregistry.azurecr.io",
    "DOCKER_REGISTRY_SERVER_USERNAME":"DTODevRegistry",
    "DOCKER_REGISTRY_SERVER_PASSWORD":"oFEMlwhbAjYpyIcBRfh/cSnu/Dx/U8FW",
    "containerImage":"DOCKER|dtodevregistry.azurecr.io/blobparser:latest"


  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-04-01",
      "name": "[variables('storageAccountName')]",
      "location": "[variables('location')]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "properties": {
           "accessTier": "Hot"
      },
      "resources": [
        {
          "type": "blobServices/containers",
          "apiVersion": "2019-06-01",
          "name": "[concat('default/', variables('storageContainerName'))]",
          "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
          ],
          "properties": {
            "publicAccess": "None"
          }
        }
      ]
    },
    {
      "type": "Microsoft.Devices/IotHubs",
      "apiVersion": "2020-07-10-preview",
      "name": "[variables('iotHubName')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "sku": {
        "name": "[parameters('skuName')]",
        "capacity": "[parameters('skuUnits')]"
      },
      "properties": {
        "eventHubEndpoints": {
          "events": {
            "retentionTimeInDays": 1,
            "partitionCount": "[parameters('d2cPartitions')]"
          }
        },
        "routing": {
          "endpoints": {
            "storageContainers": [
              {
                "connectionString": "[Concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';EndpointSuffix=',environment().suffixes.storage,';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]",
                "containerName": "[variables('storageContainerName')]",
                "fileNameFormat": "{iothub}/{partition}/{YYYY}/{MM}/{DD}/{HH}/{mm}.json",
                "batchFrequencyInSeconds": 100,
                "maxChunkSizeInBytes": 104857600,
                "encoding": "json",
                "name": "[variables('storageEndpoint')]"
              }
            ]
          },
          "routes": [
            {
              "name": "IoTStorageRoute",
              "source": "DeviceMessages",
              "condition": "true",
              "endpointNames": [
                "[variables('storageEndpoint')]"
              ],
              "isEnabled": true
            }
          ],
          "fallbackRoute": {
            "name": "$fallback",
            "source": "DeviceMessages",
            "condition": "true",
            "endpointNames": [
              "events"
            ],
            "isEnabled": true
          }
        },
        "messagingEndpoints": {
          "fileNotifications": {
            "lockDurationAsIso8601": "PT1M",
            "ttlAsIso8601": "PT1H",
            "maxDeliveryCount": 10
          }
        },
        "enableFileUploadNotifications": false,
        "cloudToDevice": {
          "maxDeliveryCount": 10,
          "defaultTtlAsIso8601": "PT1H",
          "feedback": {
            "lockDurationAsIso8601": "PT1M",
            "ttlAsIso8601": "PT1H",
            "maxDeliveryCount": 10
          }
        }
      }
    },
            {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2018-02-01",
            "name": "[variables('serverfarms_host_name')]",
            "location": "[variables('location')]",
            "tags": "[variables('resourceTags')]",
            "sku": {
                "name": "P1v2",
                "tier": "PremiumV2",
                "size": "P1v2",
                "family": "Pv2",
                "capacity": 1
            },
            "kind": "linux",
            "properties": {
                "perSiteScaling": false,
                "maximumElasticWorkerCount": 1,
                "isSpot": false,
                "reserved": true,
                "isXenon": false,
                "hyperV": false,
                "targetWorkerCount": 0,
                "targetWorkerSizeId": 0
            }

        },
        {
            "type": "Microsoft.Sql/servers",
            "apiVersion": "2020-08-01-preview",
            "name": "[variables('sql_server_name')]",
            "location": "[variables('location')]",
            "tags": "[variables('resourceTags')]",
            "kind": "v12.0",
            "properties": {
                "administratorLogin": "[parameters('sqlAdminLogin')]",
                "administratorLoginPassword" : "[parameters('sqlAdminPassword')]",
                "version": "12.0",
                "publicNetworkAccess": "Enabled"
            }
        },

        // {
        //     "type": "Microsoft.Sql/servers/advisors",
        //     "apiVersion": "2014-04-01",
        //     "name": "[concat(variables('sql_server_name'), '/ForceLastGoodPlan')]",
        //     "dependsOn": [
        //         "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]"
        //     ],
        //     "properties": {
        //         "autoExecuteValue": "Enabled"
        //     }
        // },

        {
            "type": "Microsoft.Sql/servers/databases",
            "apiVersion": "2020-08-01-preview",
            "name": "[concat(variables('sql_server_name'), '/' ,variables('sql_db_name'))]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]"
            ],
            "tags": "[variables('resourceTags')]",
            "sku": {
                "name": "Basic",
                "tier": "Basic",
                "capacity": 5
            },
            "kind": "v12.0,user",
            "properties": {
                "collation": "SQL_Latin1_General_CP1_CI_AS",
                "maxSizeBytes": 2147483648,
                "catalogCollation": "SQL_Latin1_General_CP1_CI_AS",
                "zoneRedundant": false,
                "readScale": "Disabled",
                "storageAccountType": "GRS",
                "maintenanceConfigurationId": "/subscriptions/dfbdbcfc-969a-4679-86c0-ad2c438e14ae/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_Default"
            }
        },

        {
            "type": "Microsoft.Sql/servers/firewallRules",
            "apiVersion": "2020-08-01-preview",
            "name": "[concat(variables('sql_server_name'), '/AllowAllWindowsAzureIps')]",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]"
            ],
            "properties": {
                "startIpAddress": "0.0.0.0",
                "endIpAddress": "0.0.0.0"
            }
        },

        {
            "type": "Microsoft.Sql/servers/securityAlertPolicies",
            "apiVersion": "2020-08-01-preview",
            "name": "[concat(variables('sql_server_name'), '/Default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]"
            ],
            "properties": {
                "state": "Enabled"
            }
        },

        {
            "type": "Microsoft.Sql/servers/databases/advisors",
            "apiVersion": "2014-04-01",
            "name": "[concat(variables('sql_server_name'), '/' ,variables('sql_db_name'),'/ForceLastGoodPlan')]",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', variables('sql_server_name'), variables('sql_db_name'))]",
                "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]"
            ],
            "properties": {
                "autoExecuteValue": "Enabled"
            }
        },

        {
            "type": "Microsoft.Sql/servers/databases/backupLongTermRetentionPolicies",
            "apiVersion": "2020-08-01-preview",
            "name": "[concat(variables('sql_server_name'), '/' ,variables('sql_db_name'),'/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', variables('sql_server_name'), variables('sql_db_name'))]",
                "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]"
            ],
            "properties": {
                "weeklyRetention": "PT0S",
                "monthlyRetention": "PT0S",
                "yearlyRetention": "PT0S",
                "weekOfYear": 1
            }
        },
        {
            "type": "Microsoft.Sql/servers/databases/backupShortTermRetentionPolicies",
            "apiVersion": "2020-08-01-preview",
            "name": "[concat(variables('sql_server_name'), '/' ,variables('sql_db_name'),'/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', variables('sql_server_name'), variables('sql_db_name'))]",
                "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]"
            ],
            "properties": {
                "retentionDays": 7
            }
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2018-11-01",
            "name": "[variables('funcApp_name')]",
            "location": "[variables('location')]",
            "tags": "[variables('resourceTags')]",
            "dependsOn": [
                            "[resourceId('Microsoft.Sql/servers', variables('sql_server_name'))]",
                            "[resourceId('Microsoft.Sql/servers/databases', variables('sql_server_name'), variables('sql_db_name'))]",
                            "[resourceId('Microsoft.Web/serverfarms',variables('serverfarms_host_name'))]",
                            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
                        ],
            "kind": "linux,functionapp",
            "properties": {
                "enabled": true,

                "serverFarmId": "[variables('serverfarm_externalid')]",
                "reserved": true,
                "isXenon": false,
                "hyperV": false,
                "siteConfig": {
                "appSettings":[
                    {
                        "name": "AzureWebJobsStorage",
                        "value": "[Concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';EndpointSuffix=',environment().suffixes.storage,';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]"
                    },
                    {
                        "name": "storageconnection",
                        "value": "[Concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';EndpointSuffix=',environment().suffixes.storage,';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]"
                    },
                    {
                        "name": "FUNCTIONS_EXTENSION_VERSION",
                        "value": "~3"
                    },
                    {
                        "name": "FUNCTIONS_WORKER_RUNTIME",
                        "value": "dotnet"
                    },

                    {
                        "name": "DOCKER_REGISTRY_SERVER_URL",
                        "value": "[variables('DOCKER_REGISTRY_SERVER_URL')]"
                    },
                    {
                        "name": "DOCKER_REGISTRY_SERVER_USERNAME",
                        "value": "[variables('DOCKER_REGISTRY_SERVER_USERNAME')]"
                    },
                    {
                        "name": "DOCKER_REGISTRY_SERVER_PASSWORD",
                        "value": "[variables('DOCKER_REGISTRY_SERVER_PASSWORD')]"
                    },
                    {

                        "name": "table_name",
                        "value": "[parameters('Table Name')]"
                    }

                ],
                "connectionStrings": [
                    {

                        "name":"SQLConnectionString",
                        "connectionString": "[concat('Server=tcp:', reference(resourceId('Microsoft.Sql/servers/', variables('sql_server_name'))).fullyQualifiedDomainName, ',1433;Initial Catalog=', variables('sql_db_name'), ';User Id=', parameters('sqlAdminLogin'), '@', variables('sql_server_name'), ';Password=', parameters('sqlAdminPassword'), ';MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;')]",
                        "type": "SQLAzure"


                    }
                ],

                //"linuxFxVersion": "[variables('containerImage')]",
                "alwaysOn": true
            }

            }
        }


  ],
  "outputs": {

  }
}
